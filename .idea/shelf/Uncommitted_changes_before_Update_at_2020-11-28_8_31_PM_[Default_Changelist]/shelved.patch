Index: app/src/main/java/com/ChillChat/ChillChat/DatabaseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ChillChat.ChillChat;\r\n\r\nimport android.net.Uri;\r\nimport android.util.Log;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.auth.UserProfileChangeRequest;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FieldValue;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class DatabaseService {\r\n    private static final String TAG = \"DatabaseService\";\r\n\r\n    // Access a Cloud Firestore instance from your Activity\r\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n    // This is a reference to all of our different collections. This way we don't have to type a\r\n    // lot of code to access the same collection over and over again\r\n    final CollectionReference userCollection = db.collection(\"users\");\r\n    final CollectionReference groupCollection = db.collection(\"groups\");\r\n\r\n    /**\r\n     * Helper Function, this is a helper method that should stay private to this class\r\n     * This function uses the .set() function to create user documents for the database.\r\n     * This is where we store extra user data after they created after successful registration.\r\n     * Basic information can be access with FirebaseAuth.getInstance().getUser . . .getEmail(), etc.\r\n     *\r\n     * @param uid       UID of the user\r\n     * @param email     Email address of the user (for testing)\r\n     * @param firstName First name of the user (to add to the user record)\r\n     */\r\n    private void setUserData(String uid, String email, String firstName) {\r\n        // Create a user object for the document and add data to it.\r\n        // This can be expanded in the future\r\n        Map<String, Object> user = new HashMap<>();\r\n\r\n\r\n        user.put(\"email\", email);\r\n        user.put(\"firstName\", firstName);\r\n        user.put(\"dateRegistered\", FieldValue.serverTimestamp());\r\n\r\n        // Add the user to the User Collection\r\n        userCollection.document(uid).set(user)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Log.d(TAG, \"DocumentSnapshot successfully written!\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(TAG, \"Error writing document\", e);\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void getUserData() {\r\n        DocumentReference reference = userCollection.document(user.getUid());\r\n\r\n        reference.get()\r\n                .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                        if (task.isSuccessful()) {\r\n\r\n                            DocumentSnapshot document = task.getResult();\r\n\r\n                            if (document.exists()) {\r\n                                Map<String, Object> data = document.getData();\r\n\r\n                                //log and add every field data in the user document\r\n                                ProfileFragment.userData.add(data.get(\"firstName\").toString());\r\n                                Log.i(TAG, \"firstName: \" + ProfileFragment.userData.get(0));\r\n\r\n                                ProfileFragment.userData.add(data.get(\"email\").toString());\r\n                                Log.i(TAG, \"email: \" + ProfileFragment.userData.get(1));\r\n\r\n                                //userData.add(data.get(\"firstName\").toString());\r\n                            } else {\r\n                                Log.d(TAG, \"No such document\");\r\n                            }\r\n\r\n                        } else {\r\n                            Log.w(TAG, \"get failed with \", task.getException());\r\n                        }\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    void setGroupData(String id, String name) {\r\n        Map<String, Object> group = new HashMap<>();\r\n\r\n        // Add the group to the Group Collection\r\n        groupCollection.add(group)\r\n                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {\r\n                    @Override\r\n                    public void onSuccess(DocumentReference documentReference) {\r\n                        Log.d(TAG, \"DocumentSnapshot successfully written!\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(TAG, \"Error writing document\", e);\r\n                    }\r\n                });\r\n    }\r\n\r\n    /**\r\n     * Update the user's document as well as profile data\r\n     *\r\n     * @param firstName User's first name\r\n     * @param email     User's email address\r\n     */\r\n    static void updateUserData(String email, String firstName) {\r\n        // Create user document\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        DatabaseService db = new DatabaseService();\r\n\r\n        if (user != null) {\r\n            db.setUserData(user.getUid(), email, firstName);\r\n\r\n            UserProfileChangeRequest profileUpdates = new UserProfileChangeRequest.Builder()\r\n                    .setDisplayName(firstName)\r\n                    .build();\r\n\r\n            user.updateProfile(profileUpdates)\r\n                    .addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                        @Override\r\n                        public void onComplete(@NonNull Task<Void> task) {\r\n                            Log.d(TAG, \"User profile updated.\");\r\n                        }\r\n                    })\r\n                    .addOnFailureListener(new OnFailureListener() {\r\n                        @Override\r\n                        public void onFailure(@NonNull Exception e) {\r\n                            Log.w(TAG, \"User profile was not updated.\");\r\n                        }\r\n                    });\r\n        } else {\r\n            Log.w(TAG, \"fuck. the user is nullllllllllllllllllll\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the current group's message array with the properties of the ChatMessage class.\r\n     *\r\n     * @param message Instance of the ChatMessage class\r\n     */\r\n    public void sendMessage(ChatMessage message) {\r\n        Map<String, Object> msg = new HashMap<>();\r\n\r\n        // More data can be added just by writing lines similar to the two below\r\n\r\n        msg.put(\"message\", message.message);\r\n        msg.put(\"sender\", message.firstName);\r\n        msg.put(\"msgId\", message.messageID);\r\n        msg.put(\"userID\", message.userID);\r\n\r\n        groupCollection\r\n                .document(\"Rd9DOKVw33lCtfzSnvjV\") // TODO Update this so the document path is equal to the group number\r\n                .update(\"messages\", FieldValue.arrayUnion(msg))\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Log.i(TAG, \"Message sent\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(TAG, \"Message not sent\");\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets all the messages for the corresponding group (see param) and update the list of messages\r\n     * Currently only gets the message, but has the capability to get other data based on the\r\n     * ChatMessage class and its properties.\r\n     *\r\n     * @param groupNumber The group from which we grab messages\r\n     */\r\n    public void getMessages(int groupNumber) {\r\n        groupCollection.document(\"Rd9DOKVw33lCtfzSnvjV\") // TODO Update this so the document path is equal to the group number\r\n                .addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onEvent(@Nullable DocumentSnapshot snapshot, @Nullable FirebaseFirestoreException error) {\r\n                        if (error != null) {\r\n                            Log.w(TAG, \"Listen failed.\", error);\r\n                            return;\r\n                        }\r\n\r\n                        if (snapshot != null && snapshot.exists()) {\r\n                            // Ignore the warning here\r\n                            ArrayList<HashMap<String, String>> incomingMessages = (ArrayList<HashMap<String, String>>) snapshot.getData().get(\"messages\");\r\n\r\n                            if (incomingMessages != null) {\r\n\r\n                                for (int i = 0; i < incomingMessages.size() - 1; i++) {\r\n\r\n                                    ChatMessage incomingMessage = new ChatMessage(\r\n                                            incomingMessages.get(i).get(\"message\"),\r\n                                            incomingMessages.get(i).get(\"sender\"),\r\n                                            1,\r\n                                            incomingMessages.get(i).get(\"msgId\"),\r\n                                            incomingMessages.get(i).get(\"userID\"));\r\n\r\n                                    if (!ChatFragment.chatMessages.contains(incomingMessage)) {\r\n                                        Log.d(TAG, \"New message detected and being added to message array\");\r\n//\r\n                                        ChatFragment.chatMessages.add(incomingMessage);\r\n                                        ChatFragment.externallyCallDatasetChanged();\r\n                                    }\r\n                                }\r\n\r\n                                Log.d(TAG, \"New Message Query Complete\");\r\n                            } else {\r\n                                Log.d(TAG, \"Skipped new message query. Existing data is up to date.\");\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            Log.d(TAG, \"Current data: null\");\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    /**\r\n     * @return - Null if the user does not exist\r\n     * - [String] \"Anonymous\" if they're anon\r\n     * - [String] User's full display name if they do exist. Space delimited if there are\r\n     * middle and last names\r\n     */\r\n    public static String getDisplayName() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        if (user != null && user.isAnonymous()) {\r\n            return \"Anonymous\";\r\n        } else if (user != null) {\r\n            return user.getDisplayName();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the user's photo url (AKA profile pic).\r\n     *\r\n     * @return URI that directs to the user's stored image URL in firebase.\r\n     */\r\n    public static Uri getImageUrl() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        if (user != null && user.isAnonymous()) {\r\n            return Uri.parse(\"https://i.redd.it/95pfytrlsl241.jpg\"); // S M O O T H B R A I N\r\n        } else if (user != null) {\r\n            return user.getPhotoUrl();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO Code this so it takes the image's location and stores it in firebase first\r\n     * Sets the user's profile pic to whatever they uploaded.\r\n     *\r\n     * @param imageUrl The URI of the new profile pic once it is updated on the databse\r\n     */\r\n    public static void setImageUrl(Uri imageUrl) {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        if (user != null && user.isAnonymous()) {\r\n            Log.w(TAG, \"Anonymous users should not be able to change their profile pictures.\");\r\n        }\r\n        if (user != null) {\r\n            UserProfileChangeRequest profileUpdates = new UserProfileChangeRequest.Builder()\r\n                    .setPhotoUri(imageUrl)\r\n                    .build();\r\n\r\n            user.updateProfile(profileUpdates)\r\n                    .addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                        @Override\r\n                        public void onComplete(@NonNull Task<Void> task) {\r\n                            Log.d(TAG, \"Profile picture updated.\");\r\n                        }\r\n                    })\r\n                    .addOnFailureListener(new OnFailureListener() {\r\n                        @Override\r\n                        public void onFailure(@NonNull Exception e) {\r\n                            Log.w(TAG, \"Profile picture was not updated.\");\r\n                        }\r\n                    });\r\n        } else {\r\n            Log.w(TAG, \"fuck. the user is nullllllllllllllllllll\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current user's UID. This helps reduce clutter.\r\n     * We no longer have to run the first line in this function.\r\n     *\r\n     * @return - [STRING] Current user's UID\r\n     */\r\n    public static String getUID() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        return user.getUid();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/ChillChat/ChillChat/DatabaseService.java	(revision c6180ae99a0118ef1d8e3d737d1702c2023d6649)
+++ app/src/main/java/com/ChillChat/ChillChat/DatabaseService.java	(date 1606450622858)
@@ -75,7 +75,7 @@
     }
 
     public void getUserData() {
-        DocumentReference reference = userCollection.document(user.getUid());
+        DocumentReference reference = userCollection.document(getUID());
 
         reference.get()
                 .addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
@@ -105,7 +105,6 @@
                         }
                     }
                 });
-
     }
 
     void setGroupData(String id, String name) {
@@ -134,12 +133,11 @@
      * @param email     User's email address
      */
     static void updateUserData(String email, String firstName) {
-        // Create user document
         FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
         DatabaseService db = new DatabaseService();
 
         if (user != null) {
-            db.setUserData(user.getUid(), email, firstName);
+            db.setUserData(getUID(), email, firstName);
 
             UserProfileChangeRequest profileUpdates = new UserProfileChangeRequest.Builder()
                     .setDisplayName(firstName)
