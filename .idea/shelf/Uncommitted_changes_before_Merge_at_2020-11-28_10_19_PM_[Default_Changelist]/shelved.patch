Index: app/src/main/java/com/ChillChat/ChillChat/DatabaseService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.ChillChat.ChillChat;\r\n\r\nimport android.content.Context;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.util.Log;\r\nimport android.util.Xml;\r\nimport android.view.View;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.fragment.app.FragmentActivity;\r\n\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.gms.tasks.Tasks;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseUser;\r\nimport com.google.firebase.auth.UserProfileChangeRequest;\r\nimport com.google.firebase.firestore.CollectionReference;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.EventListener;\r\nimport com.google.firebase.firestore.FieldValue;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.FirebaseFirestoreException;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport org.xmlpull.v1.XmlPullParser;\r\n\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.ExecutionException;\r\n\r\nimport javax.net.ssl.HttpsURLConnection;\r\n\r\npublic class DatabaseService {\r\n    private static final String TAG = \"DatabaseService\";\r\n\r\n    // Access a Cloud Firestore instance from your Activity\r\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n\r\n    // This is a reference to all of our different collections. This way we don't have to type a\r\n    // lot of code to access the same collection over and over again\r\n    final CollectionReference userCollection = db.collection(\"users\");\r\n    final CollectionReference groupCollection = db.collection(\"groups\");\r\n    // Make a blank age\r\n    // Make a blank bio\r\n    // Make a default profile pic\r\n\r\n    /**\r\n     * Helper Function, this is a helper method that should stay private to this class\r\n     * This function uses the .set() function to create user documents for the database.\r\n     * This is where we store extra user data after they created after successful registration.\r\n     * Basic information can be access with FirebaseAuth.getInstance().getUser . . .getEmail(), etc.\r\n     *\r\n     * @param uid       UID of the user\r\n     * @param email     Email address of the user (for testing)\r\n     * @param firstName First name of the user (to add to the user record)\r\n     */\r\n    private void setUserData(String uid, String email, String firstName) {\r\n        // Create a user object for the document and add data to it.\r\n        // This can be expanded in the future\r\n        Map<String, Object> user = new HashMap<>();\r\n        user.put(\"email\", email);\r\n        user.put(\"firstName\", firstName);\r\n        user.put(\"dateRegistered\", FieldValue.serverTimestamp());\r\n\r\n        // Add the user to the User Collection\r\n        userCollection.document(uid).set(user)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Log.d(TAG, \"DocumentSnapshot successfully written!\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(TAG, \"Error writing document\", e);\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void getProfileData(final String userID, final FragmentActivity result) {\r\n            DatabaseService db = new DatabaseService();\r\n\r\n            // Create a reference to the cities collection\r\n            CollectionReference userRef = db.userCollection;\r\n            DocumentReference reference = userRef.document(userID);\r\n\r\n            reference.get().\r\n                    addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                    if (task.isSuccessful()) {\r\n\r\n                        DocumentSnapshot document = task.getResult();\r\n\r\n                        if (document.exists()) {\r\n\r\n                            Map profileData = document.getData();\r\n                            Collection data = profileData.values();\r\n                            Log.d(TAG, \"DocumentSnapshot data: \" + document.getData());\r\n                            User user;\r\n\r\n                            user = new User(document.getDate(\"dateRegistered\"), (String) document.get(\"email\"), (String) document.get(\"firstName\"), userID);\r\n                            //Check if the user is Anonymous and send default image\r\n\r\n                            EditText name = result.findViewById(R.id.nameEditText);\r\n                            name.setText(user.getFirstName());\r\n                            \r\n                            EditText register = result.findViewById(R.id.registeredEditText);\r\n                            register.setText(user.getDateRegistered().toString());\r\n\r\n//                        if(\"Anonymous\".equals(user.getFirstName())) {\r\n//                            //Temp - S M O O T H B R A I N\r\n//                            Picasso.get().load(\"https://i.redd.it/95pfytrlsl241.jpg\").into(userPic);\r\n//                        } else {\r\n//                            //ToDo - Get the user image from the database once this is possible\r\n//                            //Temp - B I G B R A I N\r\n//                            Picasso.get().load(\"https://cdn.the-scientist.com/assets/articleNo/36663/iImg/15248/d305ec2a-9f5a-4894-8cd3-a7c43bb0756b-brain-640.jpg\").into(userPic);\r\n//                        }\r\n\r\n                    } else {\r\n                            Log.d(TAG, \"No such document\");\r\n                    }\r\n                } else {\r\n                        Log.w(TAG, \"get failed with \", task.getException());\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    void setGroupData(String id, String name) {\r\n        Map<String, Object> group = new HashMap<>();\r\n\r\n        // Add the group to the Group Collection\r\n        groupCollection.add(group)\r\n                .addOnSuccessListener(new OnSuccessListener<DocumentReference>() {\r\n                    @Override\r\n                    public void onSuccess(DocumentReference documentReference) {\r\n                        Log.d(TAG, \"DocumentSnapshot successfully written!\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(TAG, \"Error writing document\", e);\r\n                    }\r\n                });\r\n    }\r\n\r\n    //Function to Delete User data from Database\r\n    void deleteUserData(String uid) {\r\n        userCollection.document(uid).delete();\r\n        Log.i(TAG, \"User Deleted\");\r\n    }\r\n\r\n\r\n    /**\r\n     * Deletes Anonymous Users data on Logout\r\n     * No parameter required since currentUser is fetched and deleteUserData is called\r\n     */\r\n\r\n    static void deleteAnonymousUser() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        DatabaseService db = new DatabaseService();\r\n\r\n        //Function that gets userID already\r\n        if (user.isAnonymous()) {\r\n            user.delete();\r\n            db.deleteUserData(getUID());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the user's document as well as profile data\r\n     *\r\n     * @param firstName User's first name\r\n     * @param email     User's email address\r\n     */\r\n    static void updateUserData(String email, String firstName) {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n        DatabaseService db = new DatabaseService();\r\n\r\n        if (user != null) {\r\n            db.setUserData(getUID(), email, firstName);\r\n\r\n            UserProfileChangeRequest profileUpdates = new UserProfileChangeRequest.Builder()\r\n                    .setDisplayName(firstName)\r\n                    .build();\r\n\r\n            user.updateProfile(profileUpdates)\r\n                    .addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                        @Override\r\n                        public void onComplete(@NonNull Task<Void> task) {\r\n                            Log.d(TAG, \"User profile updated.\");\r\n                        }\r\n                    })\r\n                    .addOnFailureListener(new OnFailureListener() {\r\n                        @Override\r\n                        public void onFailure(@NonNull Exception e) {\r\n                            Log.w(TAG, \"User profile was not updated.\");\r\n                        }\r\n                    });\r\n        } else {\r\n            Log.w(TAG, \"fuck. the user is nullllllllllllllllllll\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update the current group's message array with the properties of the ChatMessage class.\r\n     ***UPDATED*** THIS IS SATHS OLD SHIT CODE BAHAHHAHAHA\r\n     * @param message Instance of the ChatMessage class\r\n     */\r\n//    public void sendMessage(ChatMessage message) {\r\n//        Map<String, Object> msg = new HashMap<>();\r\n//\r\n//        // More data can be added just by writing lines similar to the two below\r\n//\r\n//        msg.put(\"message\", message.message);\r\n//        msg.put(\"sender\", message.firstName);\r\n//        msg.put(\"msgId\", message.messageID);\r\n//        msg.put(\"userID\", message.userID);\r\n\r\n\r\n//        groupCollection\r\n//                .document(\"Rd9DOKVw33lCtfzSnvjV\") // TODO Update this so the document path is equal to the group number\r\n//                .update(\"messages\", FieldValue.arrayUnion(msg))\r\n//                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n//                    @Override\r\n//                    public void onSuccess(Void aVoid) {\r\n//                        Log.i(TAG, \"Message sent\");\r\n//                    }\r\n//                })\r\n//                .addOnFailureListener(new OnFailureListener() {\r\n//                    @Override\r\n//                    public void onFailure(@NonNull Exception e) {\r\n//                        Log.w(TAG, \"Message not sent\");\r\n//                    }\r\n//                });\r\n//\r\n//    }\r\n\r\n    /**\r\n     * This function fetches the content of message from ChatMessage and parse it to a HashMap\r\n     *\r\n     * message\r\n     * firstName\r\n     * messageID\r\n     * userID\r\n     *\r\n     * @param message\r\n     */\r\n    public Map<String, Object> getMessageContent(ChatMessage message){\r\n\r\n        Map<String, Object> msg = new HashMap<>();\r\n        msg.put(\"message\", message.message);\r\n        msg.put(\"sender\", message.firstName);\r\n        msg.put(\"msgId\", message.messageID);\r\n        msg.put(\"userID\", message.userID);\r\n\r\n        return msg;\r\n    }\r\n\r\n    /**\r\n     * This function will perform the actual sending of the Messages\r\n     * Once the callback function has completed and fetched the document\r\n     *\r\n     * @param msg, documentUID\r\n     */\r\n    public static void sendMessage(Map<String, Object> msg, String documentUID) {\r\n        DatabaseService db = new DatabaseService();\r\n        db.groupCollection\r\n                .document(documentUID)\r\n                .update(\"messages\", FieldValue.arrayUnion(msg))\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Log.i(TAG, \"Message sent\");\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        Log.w(TAG, \"Message not sent\");\r\n                    }\r\n                });\r\n    }\r\n\r\n    /**\r\n     * This helper function will help the sendMessage function by first loading the\r\n     * documents and then calling sendMessage after retrieving the entire array\r\n     * This is done to avoid any aSynchronous issues\r\n     *\r\n     * @param message message The group from which we grab messages\r\n     */\r\n\r\n    public void sendMessageHelper(final ChatMessage message) {\r\n\r\n        final Map<String, Object> msgMap = getMessageContent(message);\r\n        DatabaseService db = new DatabaseService();\r\n        final ArrayList<String> documentID = new ArrayList<String>();\r\n\r\n        db.groupCollection.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n\r\n                if (task.isSuccessful()) {\r\n                    for (QueryDocumentSnapshot document : task.getResult()) {\r\n                        documentID.add(document.getId());\r\n                    }\r\n                    sendMessage(msgMap, documentID.get(message.groupNumber));\r\n\r\n                } else {\r\n                    Log.i(TAG, \"Unsuccessful\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets all the messages for the corresponding group (see param) and update the list of messages\r\n     * Currently only gets the message, but has the capability to get other data based on the\r\n     * ChatMessage class and its properties.\r\n     *\r\n     * **UPDATE** The document is now fetched from the helper function getMessageHelper\r\n     * Due to an aSynchronous problem, the helper will fetch the groupDocument first\r\n     * to avoid a potential thread block\r\n     *\r\n     * @param groupDocumentString The group from which we grab messages\r\n     */\r\n    public void getMessages(String groupDocumentString) {\r\n        groupCollection.document(groupDocumentString)\r\n                .addSnapshotListener(new EventListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onEvent(@Nullable DocumentSnapshot snapshot, @Nullable FirebaseFirestoreException error) {\r\n                        if (error != null) {\r\n                            Log.w(TAG, \"Listen failed.\", error);\r\n                            return;\r\n                        }\r\n\r\n                        if (snapshot != null && snapshot.exists()) {\r\n                            // Ignore the warning here\r\n                            ArrayList<HashMap<String, String>> incomingMessages = (ArrayList<HashMap<String, String>>) snapshot.getData().get(\"messages\");\r\n\r\n                            if (incomingMessages != null) {\r\n\r\n                                for (int i = 0; i < incomingMessages.size(); i++) {\r\n\r\n                                    ChatMessage incomingMessage = new ChatMessage(\r\n                                            incomingMessages.get(i).get(\"message\"),\r\n                                            incomingMessages.get(i).get(\"sender\"),\r\n\r\n                                            0, //TODO this is hardcoded groupNumber\r\n                                            incomingMessages.get(i).get(\"msgId\"),\r\n                                            incomingMessages.get(i).get(\"userID\"));\r\n\r\n                                    if (!ChatFragment.chatMessages.contains(incomingMessage)) {\r\n                                        Log.d(TAG, \"New message detected and being added to message array\");\r\n                                        ChatFragment.chatMessages.add(incomingMessage);\r\n                                        ChatFragment.externallyCallDatasetChanged();\r\n                                    }\r\n                                }\r\n\r\n                                Log.d(TAG, \"New Message Query Complete\");\r\n                            } else {\r\n                                Log.d(TAG, \"Skipped new message query. Existing data is up to date.\");\r\n                            }\r\n\r\n                        } else {\r\n                            Log.d(TAG, \"Current data: null\");\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n    /**\r\n     * Instead of the HARDCODED document, this helper function for gettingMessages will FETCH\r\n     * The specific document index of the Array and return\r\n     * The document corresponding to the groupNumber\r\n     *\r\n     * @param groupNumber Specifies which group to fetch\r\n     */\r\n    public void getMessageHelper(final int groupNumber) {\r\n\r\n        DatabaseService db = new DatabaseService();\r\n        final ArrayList<String> documentID = new ArrayList<String>();\r\n\r\n        db.groupCollection.get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n\r\n                if (task.isSuccessful()) {\r\n                    for (QueryDocumentSnapshot document : task.getResult()) {\r\n                        documentID.add(document.getId());\r\n                    }\r\n                    getMessages(documentID.get(groupNumber));\r\n\r\n                } else {\r\n                    Log.i(TAG, \"Unsuccessful\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * @return - Null if the user does not exist\r\n     * - [String] \"Anonymous\" if they're anon\r\n     * - [String] User's full display name if they do exist. Space delimited if there are\r\n     * middle and last names\r\n     */\r\n    public static String getDisplayName() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        if (user != null && user.isAnonymous()) {\r\n            return \"Anonymous\";\r\n        } else if (user != null) {\r\n            return user.getDisplayName();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * This function will set the information for a specific message about the provided user\r\n     * @return - void\r\n     */\r\n    public static void getUserData(final String userID, final View result, final ImageView userPic) {\r\n        DatabaseService db = new DatabaseService();\r\n\r\n        // Create a reference to the cities collection\r\n        CollectionReference userRef = db.userCollection;\r\n        DocumentReference docRef = userRef.document(userID);\r\n\r\n        docRef.get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if (task.isSuccessful()) {\r\n                    DocumentSnapshot document = task.getResult();\r\n                    if (document.exists()) {\r\n                        Map userData = document.getData();\r\n                        Collection data = userData.values();\r\n                        Log.d(TAG, \"DocumentSnapshot data: \" + document.getData());\r\n                        Date dateObj = null;\r\n                        User user;\r\n\r\n                        //ERROR\r\n//                        user = new User(dateObj,(String) data.toArray()[1],(String) data.toArray()[0],userID);\r\n\r\n\r\n\r\n                        user = new User(document.getDate(\"dateRegistered\"), (String) document.get(\"email\"), (String) document.get(\"firstName\"), userID);\r\n                        //Check if the user is Anonymous and send default image\r\n\r\n                        if(\"Anonymous\".equals(user.getFirstName())) {\r\n                            //Temp - S M O O T H B R A I N\r\n                            Picasso.get().load(\"https://i.redd.it/95pfytrlsl241.jpg\").into(userPic);\r\n                        } else {\r\n                            //ToDo - Get the user image from the database once this is possible\r\n                            //Temp - B I G B R A I N\r\n                            Picasso.get().load(\"https://cdn.the-scientist.com/assets/articleNo/36663/iImg/15248/d305ec2a-9f5a-4894-8cd3-a7c43bb0756b-brain-640.jpg\").into(userPic);\r\n                        }\r\n                        //Set the user name under message\r\n                        TextView displayName = result.findViewById(R.id.user_name);\r\n                        displayName.setText(user.getFirstName());\r\n                    } else {\r\n                        Log.d(TAG, \"No such document\");\r\n                        //Temp - S M O O T H B R A I N\r\n                        Picasso.get().load(\"https://i.redd.it/95pfytrlsl241.jpg\").into(userPic);\r\n                        //Set the user name under message\r\n                        TextView displayName = result.findViewById(R.id.user_name);\r\n                        displayName.setText(\"Anonymous\");\r\n                    }\r\n                } else {\r\n                    Log.d(TAG, \"get failed with \", task.getException());\r\n                    Picasso.get().load(\"https://i.redd.it/95pfytrlsl241.jpg\").into(userPic);\r\n                    //Set the user name under message\r\n                    TextView displayName = result.findViewById(R.id.user_name);\r\n                    displayName.setText(\"Anonymous\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the user's photo url (AKA profile pic).\r\n     *\r\n     * @return URI that directs to the user's stored image URL in firebase.\r\n     */\r\n    public static Uri getImageUrl() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        if (user != null && user.isAnonymous()) {\r\n            return Uri.parse(\"https://i.redd.it/95pfytrlsl241.jpg\"); // S M O O T H B R A I N\r\n        } else if (user != null) {\r\n            return user.getPhotoUrl();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * TODO Code this so it takes the image's location and stores it in firebase first\r\n     * Sets the user's profile pic to whatever they uploaded.\r\n     *\r\n     * @param imageUrl The URI of the new profile pic once it is updated on the databse\r\n     */\r\n    public static void setImageUrl(Uri imageUrl) {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        if (user != null && user.isAnonymous()) {\r\n            Log.w(TAG, \"Anonymous users should not be able to change their profile pictures.\");\r\n        }\r\n        if (user != null) {\r\n            UserProfileChangeRequest profileUpdates = new UserProfileChangeRequest.Builder()\r\n                    .setPhotoUri(imageUrl)\r\n                    .build();\r\n\r\n            user.updateProfile(profileUpdates)\r\n                    .addOnCompleteListener(new OnCompleteListener<Void>() {\r\n                        @Override\r\n                        public void onComplete(@NonNull Task<Void> task) {\r\n                            Log.d(TAG, \"Profile picture updated.\");\r\n                        }\r\n                    })\r\n                    .addOnFailureListener(new OnFailureListener() {\r\n                        @Override\r\n                        public void onFailure(@NonNull Exception e) {\r\n                            Log.w(TAG, \"Profile picture was not updated.\");\r\n                        }\r\n                    });\r\n        } else {\r\n            Log.w(TAG, \"fuck. the user is nullllllllllllllllllll\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current user's UID. This helps reduce clutter.\r\n     * We no longer have to run the first line in this function.\r\n     *\r\n     * @return - [STRING] Current user's UID\r\n     */\r\n    public static String getUID() {\r\n        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();\r\n\r\n        return user.getUid();\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/ChillChat/ChillChat/DatabaseService.java	(revision 0e5293c99bc77e78098601b567f0842e38f6519f)
+++ app/src/main/java/com/ChillChat/ChillChat/DatabaseService.java	(date 1606619570607)
@@ -133,18 +133,20 @@
 
                             EditText name = result.findViewById(R.id.nameEditText);
                             name.setText(user.getFirstName());
-                            
+
                             EditText register = result.findViewById(R.id.registeredEditText);
                             register.setText(user.getDateRegistered().toString());
 
-//                        if("Anonymous".equals(user.getFirstName())) {
-//                            //Temp - S M O O T H B R A I N
-//                            Picasso.get().load("https://i.redd.it/95pfytrlsl241.jpg").into(userPic);
-//                        } else {
-//                            //ToDo - Get the user image from the database once this is possible
-//                            //Temp - B I G B R A I N
-//                            Picasso.get().load("https://cdn.the-scientist.com/assets/articleNo/36663/iImg/15248/d305ec2a-9f5a-4894-8cd3-a7c43bb0756b-brain-640.jpg").into(userPic);
-//                        }
+                            //User's Profile Picture
+                            ImageView profilePic = result.findViewById(R.id.profilePictureImageButton);
+                            if("Anonymous".equals(user.getFirstName())) {
+                                //Temp - S M O O T H B R A I N
+                                Picasso.get().load("https://i.redd.it/95pfytrlsl241.jpg").into(profilePic);
+                            } else {
+                                //ToDo - Get the user image from the database once this is possible
+                                //Temp - B I G B R A I N
+                                Picasso.get().load("https://cdn.the-scientist.com/assets/articleNo/36663/iImg/15248/d305ec2a-9f5a-4894-8cd3-a7c43bb0756b-brain-640.jpg").into(profilePic);
+                            }
 
                     } else {
                             Log.d(TAG, "No such document");
